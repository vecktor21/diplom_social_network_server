// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221219150102_Migration9")]
    partial class Migration9
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("server.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("Articles_Title_Index");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("server.Models.ArticleComment", b =>
                {
                    b.Property<int>("ArticleCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleCommentId"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasKey("ArticleCommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.ToTable("ArticleComments");
                });

            modelBuilder.Entity("server.Models.ArticleKeyWord", b =>
                {
                    b.Property<int>("ArticleKeyWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleKeyWordId"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("KeyWordId")
                        .HasColumnType("int");

                    b.HasKey("ArticleKeyWordId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("KeyWordId");

                    b.ToTable("ArticleKeyWords");
                });

            modelBuilder.Entity("server.Models.ArticlePageLike", b =>
                {
                    b.Property<int>("ArticleLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleLikeId"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("LikeId")
                        .HasColumnType("int");

                    b.HasKey("ArticleLikeId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("LikeId");

                    b.ToTable("ArticleLikes");
                });

            modelBuilder.Entity("server.Models.ArticlePage", b =>
                {
                    b.Property<int>("ArticlePageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticlePageId"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticlePageId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticlePages");
                });

            modelBuilder.Entity("server.Models.ArticlePageComment", b =>
                {
                    b.Property<int>("ArticlePageCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticlePageCommentId"), 1L, 1);

                    b.Property<int>("ArticlePageId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasKey("ArticlePageCommentId");

                    b.HasIndex("ArticlePageId");

                    b.HasIndex("CommentId");

                    b.ToTable("ArticlePageComments");
                });

            modelBuilder.Entity("server.Models.ArticlePageLike", b =>
                {
                    b.Property<int>("ArticlePageLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticlePageLikeId"), 1L, 1);

                    b.Property<int>("ArticlePageId")
                        .HasColumnType("int");

                    b.Property<int>("LikeId")
                        .HasColumnType("int");

                    b.HasKey("ArticlePageLikeId");

                    b.HasIndex("ArticlePageId");

                    b.HasIndex("LikeId");

                    b.ToTable("ArticlePageLikes");
                });

            modelBuilder.Entity("server.Models.BlockList", b =>
                {
                    b.Property<int>("BlockListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockListId"), 1L, 1);

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 12, 19, 21, 1, 0, 121, DateTimeKind.Local).AddTicks(9998));

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlockListId");

                    b.HasIndex("ObjectId");

                    b.ToTable("BlockList");
                });

            modelBuilder.Entity("server.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("server.Models.CommentAttachment", b =>
                {
                    b.Property<int>("CommentAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentAttachmentId"), 1L, 1);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("FileID")
                        .HasColumnType("int");

                    b.HasKey("CommentAttachmentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("FileID");

                    b.ToTable("CommentAttachments");
                });

            modelBuilder.Entity("server.Models.CommentLike", b =>
                {
                    b.Property<int>("CommentLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentLikeId"), 1L, 1);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("LikeId")
                        .HasColumnType("int");

                    b.HasKey("CommentLikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("LikeId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("server.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"), 1L, 1);

                    b.Property<string>("CountryNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryNameRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryID");

                    b.HasIndex("CountryNameEn")
                        .IsUnique()
                        .HasDatabaseName("Countries_CountryNameEn_Index");

                    b.HasIndex("CountryNameRu")
                        .IsUnique()
                        .HasDatabaseName("Countries_CountryNameRu_Index");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            CountryNameEn = "Kazakhstan",
                            CountryNameRu = "Казахстан"
                        },
                        new
                        {
                            CountryID = 2,
                            CountryNameEn = "Russia",
                            CountryNameRu = "Россия"
                        },
                        new
                        {
                            CountryID = 3,
                            CountryNameEn = "Uzbekistan",
                            CountryNameRu = "Узбекистан"
                        });
                });

            modelBuilder.Entity("server.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"), 1L, 1);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("server.Models.FavoriteArticle", b =>
                {
                    b.Property<int>("FavoriteArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteArticleId"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("FavoriteId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteArticleId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("FavoriteId");

                    b.ToTable("FavoriteArticles");
                });

            modelBuilder.Entity("server.Models.FavoriteGroup", b =>
                {
                    b.Property<int>("FavoriteGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteGroupId"), 1L, 1);

                    b.Property<int>("FavoriteId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteGroupId");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("GroupId");

                    b.ToTable("FavoriteGroups");
                });

            modelBuilder.Entity("server.Models.FavoritePost", b =>
                {
                    b.Property<int>("FavoritePostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoritePostId"), 1L, 1);

                    b.Property<int>("FavoriteId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("FavoritePostId");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("PostId");

                    b.ToTable("FavoritePosts");
                });

            modelBuilder.Entity("server.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogicalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FileId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            FileId = 1,
                            FileLink = "/files/images/default_avatar.png",
                            FileType = "IMAGE",
                            LogicalName = "default_avatar.png",
                            PhysicalName = "default_avatar.png",
                            PublicationDate = new DateTime(2022, 12, 19, 21, 1, 0, 149, DateTimeKind.Local).AddTicks(9202)
                        },
                        new
                        {
                            FileId = 2,
                            FileLink = "/files/images/default_group_image.png",
                            FileType = "IMAGE",
                            LogicalName = "default_group_image.png",
                            PhysicalName = "default_group_image.png",
                            PublicationDate = new DateTime(2022, 12, 19, 21, 1, 0, 149, DateTimeKind.Local).AddTicks(9221)
                        });
                });

            modelBuilder.Entity("server.Models.Friend", b =>
                {
                    b.Property<int>("FriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendId"), 1L, 1);

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("FriendId");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("server.Models.FriendRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Добрый день, я бы хотел добавить вас в друзья :)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("server.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<int>("GroupImageId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.HasKey("GroupId");

                    b.HasIndex("GroupImageId");

                    b.HasIndex("GroupName")
                        .IsUnique()
                        .HasDatabaseName("Groups_GroupName_Index");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("server.Models.GroupFile", b =>
                {
                    b.Property<int>("GroupFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupFileId"), 1L, 1);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupFileId");

                    b.HasIndex("FileId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupFiles");
                });

            modelBuilder.Entity("server.Models.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMemberId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("GroupMemberRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupMemberRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("server.Models.GroupMemberRole", b =>
                {
                    b.Property<int>("GroupMemberRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMemberRoleId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupMemberRoleId");

                    b.ToTable("GroupMemberRoles");

                    b.HasData(
                        new
                        {
                            GroupMemberRoleId = 2,
                            Name = "Moderator",
                            NameRu = "Модератор"
                        },
                        new
                        {
                            GroupMemberRoleId = 1,
                            Name = "Admin",
                            NameRu = "Администратор"
                        },
                        new
                        {
                            GroupMemberRoleId = 3,
                            Name = "User",
                            NameRu = "Пользователь"
                        });
                });

            modelBuilder.Entity("server.Models.GroupPost", b =>
                {
                    b.Property<int>("GroupPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupPostId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("GroupPostId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PostId");

                    b.ToTable("GroupPosts");
                });

            modelBuilder.Entity("server.Models.KeyWord", b =>
                {
                    b.Property<int>("KeyWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyWordId"), 1L, 1);

                    b.Property<string>("KeyWordEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KeyWordRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KeyWordId");

                    b.HasIndex("KeyWordEn")
                        .IsUnique()
                        .HasDatabaseName("KeyWords_KeyWordEn_Index");

                    b.HasIndex("KeyWordRu")
                        .IsUnique()
                        .HasDatabaseName("KeyWords_KeyWordRu_Index");

                    b.ToTable("KeyWords");

                    b.HasData(
                        new
                        {
                            KeyWordId = 1,
                            KeyWordEn = "information systems",
                            KeyWordRu = "информационные системы"
                        },
                        new
                        {
                            KeyWordId = 2,
                            KeyWordEn = "web technologies",
                            KeyWordRu = "веб-технологии"
                        },
                        new
                        {
                            KeyWordId = 3,
                            KeyWordEn = "information technology",
                            KeyWordRu = "информационные технологии"
                        });
                });

            modelBuilder.Entity("server.Models.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"), 1L, 1);

                    b.Property<int>("LikedUserId")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("LikedUserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("server.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<bool>("IsViewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("server.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<DateTime>("PublicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("server.Models.PostAttachment", b =>
                {
                    b.Property<int>("PostAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostAttachmentId"), 1L, 1);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("PostAttachmentId");

                    b.HasIndex("FileId");

                    b.HasIndex("PostId");

                    b.ToTable("PostAttachments");
                });

            modelBuilder.Entity("server.Models.PostComment", b =>
                {
                    b.Property<int>("PostCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostCommentId"), 1L, 1);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("PostCommentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("server.Models.PostLike", b =>
                {
                    b.Property<int>("PostLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostLikeId"), 1L, 1);

                    b.Property<int>("LikeId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("PostLikeId");

                    b.HasIndex("LikeId");

                    b.HasIndex("PostId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("server.Models.ReplyComment", b =>
                {
                    b.Property<int>("ReplyCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyCommentId"), 1L, 1);

                    b.Property<int>("MajorCommentId")
                        .HasColumnType("int");

                    b.Property<int>("RepliedCommentId")
                        .HasColumnType("int");

                    b.HasKey("ReplyCommentId");

                    b.HasIndex("MajorCommentId");

                    b.HasIndex("RepliedCommentId");

                    b.ToTable("ReplyComments");
                });

            modelBuilder.Entity("server.Models.RequestToGroup", b =>
                {
                    b.Property<int>("RequestToGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestToGroupId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestToGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestToGroup");
                });

            modelBuilder.Entity("server.Models.Subscribe", b =>
                {
                    b.Property<int>("SubscribeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscribeId"), 1L, 1);

                    b.Property<int>("SubId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubscribeId");

                    b.HasIndex("SubId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscribes");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<int>("UserInfoId")
                        .HasColumnType("int");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("User_Email_Index");

                    b.HasIndex("ImageId");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("User_Login_Index");

                    b.HasIndex("Nickname")
                        .IsUnique()
                        .HasDatabaseName("User_Nickname_Index");

                    b.HasIndex("RoleId");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.HasIndex("UserInfoId")
                        .IsUnique();

                    b.HasIndex("UserStatusId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "denis@mail.ru",
                            ImageId = 1,
                            IsVerified = true,
                            Login = "vecktor_21",
                            Name = "Денис",
                            Nickname = "vecktor_21",
                            Password = "$2a$11$RnBfGjvqKA0toYfoQNGw7OAurJ36uN1o0dw6/GPEt978ppCMbbRU2",
                            RegistrationDate = new DateTime(2022, 12, 19, 21, 1, 0, 440, DateTimeKind.Local).AddTicks(8683),
                            RoleId = 1,
                            Surname = "Одноуров",
                            TokenId = 1,
                            UserInfoId = 1,
                            UserStatusId = 1
                        });
                });

            modelBuilder.Entity("server.Models.UserFile", b =>
                {
                    b.Property<int>("UserFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFileId"), 1L, 1);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFileId");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("server.Models.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInfoId"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("UserInfoPrivacyTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserInfoId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserInfoPrivacyTypeId");

                    b.ToTable("UserInfo");

                    b.HasData(
                        new
                        {
                            UserInfoId = 1,
                            Age = 20,
                            City = "Астана",
                            CountryId = 1,
                            DateOfBirth = new DateTime(2001, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "ЕНУ им. Л.Н. Гуимлева",
                            Status = "Главные разработчик",
                            UserInfoPrivacyTypeId = 1
                        });
                });

            modelBuilder.Entity("server.Models.UserInfoPrivacyType", b =>
                {
                    b.Property<int>("UserInfoPrivacyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInfoPrivacyTypeId"), 1L, 1);

                    b.Property<string>("UserInfoPrivacyTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserInfoPrivacyTypeId");

                    b.ToTable("UserInfoPrivacyTypes");

                    b.HasData(
                        new
                        {
                            UserInfoPrivacyTypeId = 1,
                            UserInfoPrivacyTypeName = "PublicPage"
                        },
                        new
                        {
                            UserInfoPrivacyTypeId = 2,
                            UserInfoPrivacyTypeName = "PrivatePage"
                        },
                        new
                        {
                            UserInfoPrivacyTypeId = 3,
                            UserInfoPrivacyTypeName = "FriendsOnlyPage"
                        });
                });

            modelBuilder.Entity("server.Models.UserInterest", b =>
                {
                    b.Property<int>("UserInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInterestId"), 1L, 1);

                    b.Property<int>("KeyWordId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserInterestId");

                    b.HasIndex("KeyWordId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInterests");
                });

            modelBuilder.Entity("server.Models.UserNote", b =>
                {
                    b.Property<int>("UserNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserNoteId"), 1L, 1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserNoteId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotes");
                });

            modelBuilder.Entity("server.Models.UserPost", b =>
                {
                    b.Property<int>("UserPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPostId"), 1L, 1);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("server.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("USER");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            UserRoleId = 2,
                            RoleName = "USER"
                        });
                });

            modelBuilder.Entity("server.Models.UserStatus", b =>
                {
                    b.Property<int>("UserStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserStatusId"), 1L, 1);

                    b.Property<DateTime>("StatusFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("NORMAL");

                    b.HasKey("UserStatusId");

                    b.ToTable("UserStatuses");

                    b.HasData(
                        new
                        {
                            UserStatusId = 1,
                            StatusFrom = new DateTime(2022, 12, 19, 21, 1, 0, 149, DateTimeKind.Local).AddTicks(9298),
                            StatusName = "NORMAL"
                        });
                });

            modelBuilder.Entity("server.Models.UserToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"), 1L, 1);

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenId");

                    b.ToTable("UserTokens");

                    b.HasData(
                        new
                        {
                            TokenId = 1,
                            RefreshToken = "some token"
                        });
                });

            modelBuilder.Entity("server.Models.Article", b =>
                {
                    b.HasOne("server.Models.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("server.Models.ArticleComment", b =>
                {
                    b.HasOne("server.Models.Article", "Article")
                        .WithMany("ArticleComments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("server.Models.ArticleKeyWord", b =>
                {
                    b.HasOne("server.Models.Article", "Article")
                        .WithMany("ArticleKeyWords")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.KeyWord", "KeyWord")
                        .WithMany("ArticleKeyWords")
                        .HasForeignKey("KeyWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("KeyWord");
                });

            modelBuilder.Entity("server.Models.ArticlePageLike", b =>
                {
                    b.HasOne("server.Models.Article", "Article")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Like", "Like")
                        .WithMany()
                        .HasForeignKey("LikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Like");
                });

            modelBuilder.Entity("server.Models.ArticlePage", b =>
                {
                    b.HasOne("server.Models.Article", "Article")
                        .WithMany("ArticlePages")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("server.Models.ArticlePageComment", b =>
                {
                    b.HasOne("server.Models.ArticlePage", "ArticlePage")
                        .WithMany("ArticlePageComments")
                        .HasForeignKey("ArticlePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticlePage");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("server.Models.ArticlePageLike", b =>
                {
                    b.HasOne("server.Models.ArticlePage", "ArticlePage")
                        .WithMany("ArticlePageLikes")
                        .HasForeignKey("ArticlePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Like", "Like")
                        .WithMany()
                        .HasForeignKey("LikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticlePage");

                    b.Navigation("Like");
                });

            modelBuilder.Entity("server.Models.BlockList", b =>
                {
                    b.HasOne("server.Models.Group", "GroupObject")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "UserObject")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupObject");

                    b.Navigation("UserObject");
                });

            modelBuilder.Entity("server.Models.Comment", b =>
                {
                    b.HasOne("server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.CommentAttachment", b =>
                {
                    b.HasOne("server.Models.Comment", "Comment")
                        .WithMany("CommentAttachments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("File");
                });

            modelBuilder.Entity("server.Models.CommentLike", b =>
                {
                    b.HasOne("server.Models.Comment", "Comment")
                        .WithMany("CommentLikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Like", "Like")
                        .WithMany()
                        .HasForeignKey("LikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Like");
                });

            modelBuilder.Entity("server.Models.Favorite", b =>
                {
                    b.HasOne("server.Models.Group", null)
                        .WithMany("Favorites")
                        .HasForeignKey("GroupId");

                    b.HasOne("server.Models.Post", null)
                        .WithMany("Favorites")
                        .HasForeignKey("PostId");

                    b.HasOne("server.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.FavoriteArticle", b =>
                {
                    b.HasOne("server.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Favorite", "Favorite")
                        .WithMany()
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Favorite");
                });

            modelBuilder.Entity("server.Models.FavoriteGroup", b =>
                {
                    b.HasOne("server.Models.Favorite", "Favorite")
                        .WithMany()
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("server.Models.FavoritePost", b =>
                {
                    b.HasOne("server.Models.Favorite", "Favorite")
                        .WithMany()
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("server.Models.Friend", b =>
                {
                    b.HasOne("server.Models.User", "User1")
                        .WithMany("Friends1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User2")
                        .WithMany("Friends2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("server.Models.FriendRequest", b =>
                {
                    b.HasOne("server.Models.User", "Sender")
                        .WithMany("FriendRequestsSenders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User")
                        .WithMany("FriendRequestsReceivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Group", b =>
                {
                    b.HasOne("server.Models.File", "GroupImage")
                        .WithMany()
                        .HasForeignKey("GroupImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupImage");
                });

            modelBuilder.Entity("server.Models.GroupFile", b =>
                {
                    b.HasOne("server.Models.File", "File")
                        .WithMany("GroupFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Group", "Group")
                        .WithMany("GroupFiles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("server.Models.GroupMember", b =>
                {
                    b.HasOne("server.Models.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.GroupMemberRole", "GroupMemberRole")
                        .WithMany()
                        .HasForeignKey("GroupMemberRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User")
                        .WithMany("UserGroupMembership")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("GroupMemberRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.GroupPost", b =>
                {
                    b.HasOne("server.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("server.Models.Like", b =>
                {
                    b.HasOne("server.Models.User", "LikedUser")
                        .WithMany("Likes")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikedUser");
                });

            modelBuilder.Entity("server.Models.Notification", b =>
                {
                    b.HasOne("server.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.PostAttachment", b =>
                {
                    b.HasOne("server.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Post", "Post")
                        .WithMany("PostAttachements")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("server.Models.PostComment", b =>
                {
                    b.HasOne("server.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("server.Models.PostLike", b =>
                {
                    b.HasOne("server.Models.Like", "Like")
                        .WithMany()
                        .HasForeignKey("LikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Like");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("server.Models.ReplyComment", b =>
                {
                    b.HasOne("server.Models.Comment", "MajorComment")
                        .WithMany("ReplyComments")
                        .HasForeignKey("MajorCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Comment", "RepliedComment")
                        .WithMany()
                        .HasForeignKey("RepliedCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorComment");

                    b.Navigation("RepliedComment");
                });

            modelBuilder.Entity("server.Models.RequestToGroup", b =>
                {
                    b.HasOne("server.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Subscribe", b =>
                {
                    b.HasOne("server.Models.User", "Sub")
                        .WithMany("SubSub")
                        .HasForeignKey("SubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User")
                        .WithMany("SubUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.HasOne("server.Models.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.UserToken", "Token")
                        .WithOne("User")
                        .HasForeignKey("server.Models.User", "TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.UserInfo", "UserInfo")
                        .WithOne("User")
                        .HasForeignKey("server.Models.User", "UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.UserStatus", "UserStatus")
                        .WithOne("User")
                        .HasForeignKey("server.Models.User", "UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Role");

                    b.Navigation("Token");

                    b.Navigation("UserInfo");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("server.Models.UserFile", b =>
                {
                    b.HasOne("server.Models.File", "File")
                        .WithMany("UserFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User")
                        .WithMany("UserFile")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.UserInfo", b =>
                {
                    b.HasOne("server.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("server.Models.UserInfoPrivacyType", "UserInfoPrivacyType")
                        .WithMany()
                        .HasForeignKey("UserInfoPrivacyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("UserInfoPrivacyType");
                });

            modelBuilder.Entity("server.Models.UserInterest", b =>
                {
                    b.HasOne("server.Models.KeyWord", "KeyWord")
                        .WithMany("UserInterests")
                        .HasForeignKey("KeyWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyWord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.UserNote", b =>
                {
                    b.HasOne("server.Models.User", "User")
                        .WithMany("UserNotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.UserPost", b =>
                {
                    b.HasOne("server.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Article", b =>
                {
                    b.Navigation("ArticleComments");

                    b.Navigation("ArticleKeyWords");

                    b.Navigation("ArticleLikes");

                    b.Navigation("ArticlePages");
                });

            modelBuilder.Entity("server.Models.ArticlePage", b =>
                {
                    b.Navigation("ArticlePageComments");

                    b.Navigation("ArticlePageLikes");
                });

            modelBuilder.Entity("server.Models.Comment", b =>
                {
                    b.Navigation("CommentAttachments");

                    b.Navigation("CommentLikes");

                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("server.Models.File", b =>
                {
                    b.Navigation("GroupFiles");

                    b.Navigation("UserFiles");
                });

            modelBuilder.Entity("server.Models.Group", b =>
                {
                    b.Navigation("BlockedUsers");

                    b.Navigation("Favorites");

                    b.Navigation("GroupFiles");

                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("server.Models.KeyWord", b =>
                {
                    b.Navigation("ArticleKeyWords");

                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("server.Models.Post", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("PostAttachements");

                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("BlockedUsers");

                    b.Navigation("Favorites");

                    b.Navigation("FriendRequestsReceivers");

                    b.Navigation("FriendRequestsSenders");

                    b.Navigation("Friends1");

                    b.Navigation("Friends2");

                    b.Navigation("Likes");

                    b.Navigation("Notifications");

                    b.Navigation("SubSub");

                    b.Navigation("SubUser");

                    b.Navigation("UserFile");

                    b.Navigation("UserGroupMembership");

                    b.Navigation("UserInterests");

                    b.Navigation("UserNotes");
                });

            modelBuilder.Entity("server.Models.UserInfo", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("server.Models.UserStatus", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.UserToken", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
